A confusing part about C# code is about its Static vs Non-Static methods and Public vs Private methods.


///////////////////////////////////////////////////////////


Static vs Non-Static methods:
A Static method in C# is a method that belongs to the Class itself rather than to instances (objects) of the Class. 
This means that you can call a Static method on the Class itself, without creating an instance of the Class. 

A Non-Static method (aka an Instance method) are associated with instances (objects) of a Class. They operate on 
instance-specific data and can access and modify the state of the object they are called on. 


Note that in a function in C#, if you do not specify if the function is a Static or Non-Static method, it will be 
a Non-Static method by default.



Also note that while Python has 4 types of distinct methods,
1. Instance methods
2. Class methods
3. Static methods
4. Special methods

C# only has 3 distinct methods (Python's Static methods functionality do not exist in C#),
1. Non-static (Instance) methods (aka Instance methods in Python)
2. Static methods (aka Class methods in Python)
3. Special methods

Important note, in C#, Static methods behave like the Class methods in Python, rather than the Static methods in
Python!!! Static methods in Python are NOT THE SAME as the Static methods in C#!


////////////////////////////////////////////////////////////


Public vs Private methods:
A Public method is a method that is accessible from outside the Class in which it is defined. It is part of the 
Class's public interface, meaning that code in other Classes or parts of the program can call and use the Public 
method.

A Private method is a method that is only accessible within the Class in which it is defined. It is not part of 
the Class's public interface and cannot be called from outside the Class.


Note: - In a function/variable in C#, if you do not specify if the function is a Public or Private method, it will be 
        a Private method by default.
      - It is good practice to make all variables Private, unless they need to be Public for a specific reason.
      - It is common and recommended practice to keep variables in a function (either Public or Private), Private.
        This is in order to follow the principle of encapsulation, where the internal details of a function are 
        hidden from external code, and the internal state is only accessed/modified properties (getters, setters)
        or other functions/methods. This practice enhances code maintainability, readability, and helps prevent 
        unintended misuse of class members.
        
        (Meanwhile, variables outside of functions (and inside classes) can be either Public or Private based on 
        your requirements)


////////////////////////////////////////////////////////////


Why in C#, in the same position, sometimes the commands 'public'/'private' is used, and
sometimes the 'static' (there is no Non-Static/Instance method command) command is used?
In C#, you can use various modifiers and keywords in the same position (e.g., when 
declaring fields, methods, or properties) to control access, behavior, or characteristics 
of those members. Some common modifiers and keywords that can be used together include:

1. Access Modifiers:
-> public: Makes the member accessible from any code that can see the declaring class.
-> private: Restricts access to the member within the declaring class.
-> protected: Allows access from within the declaring class and its derived classes.
-> internal: Restricts access to the same assembly (assembly-level accessibility).
-> protected internal: Allows access from within the same assembly or from derived classes, 
   whether they are in the same assembly or different assemblies.

2. Static Modifier:
-> static: Indicates that a member belongs to the type itself rather than to instances of 
   the type. Can be used with fields, methods, properties, and nested classes.

3. Read-Only Modifier:
-> readonly: Specifies that a field can only be assigned a value at the time of declaration 
   or within a constructor. Used with fields.

4. Virtual Modifier:
-> virtual: Allows a method to be overridden in derived classes. Used with methods.

5. Abstract Modifier:
-> abstract: Indicates that a method or property has no implementation in the current class 
   and must be implemented in derived classes. Used with methods and properties.

6. Sealed Modifier:
-> sealed: Prevents a class from being inherited or a method from being overridden. Used 
   with classes and methods.

7. Override Keyword:
-> override: Indicates that a method is intended to override a virtual or abstract method 
  from a base class. Used with methods.

8. Async Modifier:
-> async: Specifies that a method contains asynchronous code and can use the await keyword 
   to pause execution until asynchronous operations are complete. Used with methods.

9. Partial Modifier:
-> partial: Allows a class, struct, or interface to be defined in multiple source files. 
   Used with classes, structs, and interfaces.

10. Event Modifier:
-> event: Declares an event that can be subscribed to and raised. Used with events.

11. Unsafe Modifier:
-> unsafe: Allows the use of unsafe code, which can work with pointers and perform low-level 
   memory operations. Used with methods, blocks, and types.

12. New Modifier:
-> new: Hides an inherited member with a member that has the same name in the derived class. 
   Used with methods and properties.

Note that depending on your design and requirements, you can use combinations of these 
modifiers to create classes and class members that meet your specific needs. e.g. the line
of code - 'public static void Funtion()' is valid.

